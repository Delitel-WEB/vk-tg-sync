from ..core import dp
from ...vk.core import bot as vk
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from ..states import BindChats
from ..keyboard import select_chat_type_kb, yes_or_no_kb
from aiogram.utils.exceptions import ChatNotFound
from ...db import Sessions
from ...db.models import Conversations
from sqlalchemy import select


@dp.message_handler(commands=["bind_chat"], state="*")
async def bind_chats(message: Message, state: FSMContext):
    """–°–≤—è–∑–∫–∞ —á–∞—Ç–æ–≤ –í–ö –∏ –¢–ì"""
    await state.finish()  # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π –ø–æ–≤—Ç–æ—Ä–∞ –≤–≤–æ–¥–∞
    await BindChats.select_type.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ß–∞—Ç–∞ –í–ö!", reply_markup=select_chat_type_kb())


@dp.callback_query_handler(text="direct_message", state=BindChats.select_type)
async def direct_message_select(query: CallbackQuery, state: FSMContext):
    data = {}
    data["chat_type"] = "DM"
    await state.set_data(data)
    await BindChats.vk_id.set()

    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –≤–∫ –ß–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>123456789</code>.",
        parse_mode="html"
    )


@dp.callback_query_handler(text="group", state=BindChats.select_type)
async def group_select(query: CallbackQuery, state: FSMContext):
    data = {}
    data["chat_type"] = "GR"
    await state.set_data(data)
    await BindChats.vk_id.set()

    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –≤–∫ –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>123</code>.",
        parse_mode="html"
    )


@dp.message_handler(state=BindChats.vk_id)
async def get_vk_id(message: Message, state: FSMContext):
    if message.text.lstrip("-").isdigit():
        data = await state.get_data()
        if data["chat_type"] == "DM":
            chat = await vk.api.users.get(message.text)
            if chat:

                data["vk_chat_id"] = 2000000000+int(message.text)
                await state.set_data(data)

                await BindChats.verify_choice_vk.set()
                await message.answer(
                    f"–ù–∞–π–¥–µ–Ω <b>{chat[0].first_name} {chat[0].last_name}</b>.\n\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ?",
                    reply_markup=yes_or_no_kb(),
                    parse_mode="html"
                )
            else:
                await message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏!"
                )
        else:
            try:
                chat = await vk.api.messages.get_conversations_by_id(2000000000+int(message.text))
            except Exception as err:
                await message.answer(err)
                chat = None
            if chat:
                if not chat.items or not chat.items[0].chat_settings:
                    await message.answer(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏!"
                    )
                else:
                    data["vk_chat_id"] = 2000000000+int(message.text)
                    await state.set_data(data)

                    await BindChats.verify_choice_vk.set()
                    await message.answer(
                        f"–ù–∞–π–¥–µ–Ω <b>{chat.items[0].chat_settings.title}</b>.\n\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ?",
                        reply_markup=yes_or_no_kb(),
                        parse_mode="html"
                    )
    else:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –≤–∫ –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>123</code>.\n\n‚ö†Ô∏è <u>–¶–µ–ª—ã–º —á–∏—Å–ª–æ–º!</u>",
            parse_mode="html"
        )


#####################################
#    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –≤–∫   #
#####################################
@dp.callback_query_handler(text="yes", state=BindChats.verify_choice_vk)
async def correct_choice(query: CallbackQuery, state: FSMContext):
    await BindChats.tg_id.set()
    await query.message.edit_text(
        "üëå –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ ID —á–∞—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–µ–¥–µ–Ω–∏—Ç—å —Å —á–∞—Ç–æ–º –í–ö!\n"
        "ü§ñ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –∏ –∏–º–µ—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∞!"
    )
    


@dp.callback_query_handler(text="no", state=BindChats.verify_choice_vk)
async def wrong_choice(query: CallbackQuery, state: FSMContext):
    await BindChats.vk_id.set()
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –≤–∫ –ß–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>123456789</code>.",
        parse_mode="html"
    )


#####################################
#       –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–∞ –¢–µ–ª–µ–≥—Ä–∞–º     #
#####################################
@dp.message_handler(state=BindChats.tg_id)
async def get_tg_id(message: Message, state: FSMContext):
    if message.text.lstrip("-").isdigit():
        if int(message.text) >= 0:
            await message.answer(
                "ID –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ –∑–Ω–∞–∫–æ–º –º–∏–Ω—É—Å!\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: -123455667"
            )
        else:
            try:
                member = await message.bot.get_chat_member(int(message.text), message.bot.id)
            except ChatNotFound:
                await message.answer(
                    "–ß–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—É—Ç–ø–∞ –∫ —á–∞—Ç—É!"
                )
            if not member.is_chat_admin():
                await message.answer(
                    "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã!\n"
                    "–°–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!"
                )
            else:
                async with Sessions() as session:
                    data = await state.get_data()
                    chat_exists = await session.scalar(select(Conversations).where(Conversations.vk_id == data["vk_chat_id"]))
                    if not chat_exists:

                        conversations = Conversations(
                            vk_id=data["vk_chat_id"],
                            tg_id=int(message.text)
                        )

                        session.add(conversations)
                        await session.commit()

                        await message.answer(
                            "–û—Ç–ª–∏—á–Ω–æ!\n"
                            "–ß–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω—ã!"
                        )
                    else:
                        await message.answer(
                            "–ß–∞—Ç —É–∂–µ –∫ —á–µ–º—É-—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!"
                        )
                
                


    else:
        await message.answer(
            "–ü—Ä–∏—à–ª–∏—Ç–µ ID —á–∞—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–µ–¥–µ–Ω–∏—Ç—å —Å —á–∞—Ç–æ–º –í–ö!\n"
            "<u>–¶–µ–ª—ã–º —á–∏—Å–ª–æ–º!</u>",
            parse_mode="html"
        )


